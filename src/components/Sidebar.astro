---
import { getRelativeLocaleUrl } from "astro:i18n";
import { Image } from "astro:assets";
import GaleLogo from "../assets/img/gale-logo.svg";

interface Link {
  href: string;
  text: string;
}

const links: Link[] = [
  { href: "/", text: "home" },
  { href: "/about/", text: "about" },
  { href: "/blog/", text: "blog" },
  { href: "/links/", text: "links" },
];

const locale = Astro.currentLocale?.toString()!;
---

<aside>
  <div class="nav-wrapper">
    <Image class="gale-logo" loading="eager" src={GaleLogo} alt="Gale logo" />
    <nav class="menu-list">
      {
        links.map(({ href, text }) => (
          <a
            href={getRelativeLocaleUrl(locale, href)}
            class={
              href === Astro.url.pathname || `/es${href}` === Astro.url.pathname
                ? "active"
                : ""
            }
            id={text}
            data-astro-history="replace"
          >
            {text}
          </a>
        ))
      }
    </nav>
  </div>
</aside>

<script>
  document.addEventListener("astro:page-load", () => {
    const nav = document.querySelector(".menu-list");
    const items = nav.querySelectorAll("a");
    const currentPathname = window.location.pathname;
    let currentIndex = 0;

    for (let i = 0; i < items.length; i++) {
      if (items[i].pathname === currentPathname) {
        currentIndex = i;
        break;
      }
    }

    const focusItem = (index: number) => {
      items[index].focus();
    };

    const handleNavigation = (event: KeyboardEvent) => {
      if (event.key === "j") {
        currentIndex = Math.min(currentIndex + 1, items.length - 1);
        focusItem(currentIndex);
      } else if (event.key === "k") {
        currentIndex = Math.max(currentIndex - 1, 0);
        focusItem(currentIndex);
      } else if (event.key === "o") {
        items[currentIndex].click();
      }
    };

    document.addEventListener("keydown", handleNavigation);
  });
</script>

<style lang="scss">
  @import "../styles/variables.scss";
  @import "../styles/mixins.scss";

  aside {
    min-width: 80px;
    max-width: 80px;
    min-height: 500px;
    display: flex;
    flex-shrink: 0;
    align-items: center;
    justify-content: start;
    flex-direction: column;
    padding-right: 70px;

    @include respond-to(md) {
      padding: 0;
      min-height: auto;
      min-width: auto;
      max-width: auto;
      flex-direction: row;
      min-width: 100%;
      padding: 2vw 0 5rem 0;
    }

    .nav-wrapper {
      top: 12rem;
      position: sticky;

      @include respond-to(md) {
        top: 0;
        position: relative;
        display: flex;
        justify-content: space-between;
        width: 100%;
        gap: 0.5em;
        margin: 0 auto;
      }

      .gale-logo {
        transform: perspective(1500px) rotateY(15deg) rotateX(10deg);
        transition: transform 1s ease;
        width: 100px;
        height: auto;

        &:hover {
          cursor: pointer;
          transform: perspective(3000px) rotateY(5deg) scale(1.1);

          @include respond-to(sm) {
            cursor: auto;
            transform: perspective(1500px) rotateY(15deg) rotateX(10deg);
          }
        }

        @include respond-to(md) {
          width: 80px;
          margin-left: -1rem;
        }
      }

      nav.menu-list {
        display: flex;
        align-items: center;
        flex-direction: column;
        padding-top: 3rem;
        gap: 1rem;

        @include respond-to(md) {
          flex-direction: row;
          align-items: flex-end;
          justify-content: space-between;
        }

        a {
          color: $white;
          background: none;
          border: none;
          text-decoration: none;
          transition: none;
          font-size: 1.2rem;

          @include respond-to(sm) {
            font-size: 1.5rem;
          }

          &:hover,
          &.active {
            color: white;
            font-weight: 700;
          }

          &.active:before {
            content: $navbar-prefix;

            @include respond-to(md) {
              content: none;
            }
          }

          &:focus,
          &:focus-visible {
            outline: none;

            &:before {
              outline-offset: 0px;
              outline-color: transparent;
              content: $navbar-prefix;

              @include respond-to(md) {
                content: none;
              }
            }
          }
        }
      }
    }
  }
</style>
